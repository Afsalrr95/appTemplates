import Alamofire

func directLinkMetho()
{
        let urlString = APIDetails.baseURL + "\(urlLink)"
        
        AF.request(
         urlString,
         method: .delete,
         parameters: nil,
         encoding: JSONEncoding.default,
         headers: nil
        ).authenticate(username: "\(name)", password: "\(pass)")
        .responseString{
            response in
            switch response.result {
            case let .success(value):
            //Do something
                case let .failure(error):print(error);
                break
            }  
        }
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

func httpMethodWithParams() //Requires SwiftyJson if you want to use JSON() function
{
  let param : [String : Any] = [
        "user_id" : userInfo.login.userId
    ]
  let url = APIDetails.baseURL + "\(urlLink)"
        var request = URLRequest(url: URL(string: url)!)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.httpBody = try! JSONSerialization.data(withJSONObject: param)
        AF.request(request)
            .responseString { response in
                // do whatever you want here
                switch response.result {
                case .failure(let error):
                    print(error)
                case .success(let value):
                    let jsonData = value.data(using: .utf8)!
                    let json = try? JSON(data: jsonData)
                    if json?["status"].bool == false
                    {
                      
                    }
                }
        }  
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

func ApiCallWithFormData()
{
 let param : [String: String] =
        [
            "amount": "\(amount)",
        ]
      let headers: HTTPHeaders = [
        "Content-type": "multipart/form-data",
        "Content-Disposition" : "form-data"
    ]
    AF.upload(multipartFormData: { (multipartFormData) in
        for (key, value) in param {
            multipartFormData.append("\(value)".data(using: String.Encoding.utf8)!, withName: key as String)
        }
    }, to: urlString, usingThreshold: UInt64.init(), method: .post, headers: headers).authenticate(username: "\(name)", password: "\(pass)").responseString{
        response in
        switch response.result {
        case let .success(value):
            var jsonData = value.data(using: .utf8)!
            var json = try? JSON(data: jsonData)
            json = try? JSON(data: jsonData)
            if json?["status"].bool == true
            {
                do {
                    let APIData = try JSONDecoder().decode(CreatePaymentOrderData.Root.self, from: jsonData)
                    CreatePaymentOrderData.decodedData = APIData
                   } catch let jsonErr {
                    print("Error: ", jsonErr)
                }
            }
        case let .failure(error):print(error);
        break
            }
        }      
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

func apiCallWithParams()
{
 let param : [String: Any] = [
        "user_id" : userInfo.login.userId,
        ]
  let urlString = APIDetails.baseURL + "\(urlLink)"
    AF.request(
     urlString,
     method: .post,
     parameters: param,
     encoding: JSONEncoding.default,
     headers: nil
    )
    .responseString{
        response in
        switch response.result {
        case let .success(value):
            let jsonData = value.data(using: .utf8)!
            let json = try? JSON(data: jsonData)
            if json?["status"].bool != true
            {
            
            }
            else if json?["status"].bool == true
            {
                
                do {
                    let APIData = try JSONDecoder().decode(DataX.Root.self, from: jsonData)
                    DataX.decodedData = APIData
                   } catch let jsonErr {
                    print("Error: ", jsonErr)
                }
            }

            case let .failure(error):print(error);
            break
        }

    }
}
//Using Codables to decode the above api response and moving it to a variable for easier access
struct DataX{

    struct Root: Codable {
        let status: Bool?
        let orderId: Int?
        private enum CodingKeys: String, CodingKey {
            case status
            case orderId = "order_id"
        }
    }
    static var decodedData: DataX.Root?
}

